var units=[],lessons=[],addUnit=function(a){units.push(a)},addLesson=function(a){var b=units[units.length-1];a.unit=b;b.lessons.push(a);lessons.push(a)};addUnit({title:"The Basics",lessons:[]});
addLesson(Object({title:"Hello World",id:"hello",description:"<p>HTML is a <span class='em'>markup language</span>, meaning that it describes the semantic meaning of the contents of a page. It consists of <span class='em'>tags</span>, which is a tag name wrapped in '&lt;' and '&gt;' (like <span class='cm-tag'>&lt;meta&gt;</span>).</p> <p>Tags generally have a <span class='em'>start</span> and an <span class='em'>end</span>, where everything between the two is the contents of the tag. The tags and everything inside of it is known as an <span class='em'>element</span>. As you will see in a moment, tags can contain other tags.</p> <p>The end tag has the same name as its start tag, but with a '/' in front. On the right, you'll see a <span class='cm-tag'>&lt;p&gt;</span> tag (the <span class='cm-tag'>p</span> stands for <span class='cm-tag'>paragraph</span>) with the content 'howdy.' The <span class='cm-tag'>&lt;p&gt;</span> tag displays its contents as text. Make it display 'Hello World' instead.</p>",input:"<p>Howdy</p>",
solution:"<p>Hello World</p>",pass:["<p>hello world</p>","<p>   heLLo wORld?</p>","<p> hello, world!</p>"],fail:["<p>Howdy world</p>","<p>Hey all</p>","<a>Hello World</a>"],valid:function(a){a=$(a);return a.is("p")&&a.text().match(/\s*hello\W+world\s*/i)}}));addLesson(Object({title:"Header? I Hardly Know Her!",id:"headers",description:"<p>Paragraphs aren't the only types of text that HTML can display. There are a number of <span class='cm-tag'>header</span> tags that display text as well, but carry the added meaning of being the title of a section or subscection of a page.</p><p>There are 6 such tags, with <span class='cm-tag'>h1</span> being the largest and most important, and <span class='cm-tag'>h6</span> being the smallest and least important. You can think of <span class='cm-tag'>h1</span> tags being the units of text book, and <span class='cm-tag'>h2</span>s being lessons, <span class='cm-tag'>h3</span>s being lessons, and so on.</p><p>Because headers carry the added meaning of identifying a section, so they should only be used for that purpose, and not as a way to change style. We'll discuss style changes in unit 3.</p><p>Experiment with changing the text of these headers, and adding your own.</p>",
input:"<h1></h1>\n<h2></h2>",solution:"<h1>Unit 1</h1>\n\t<h2>Chapter 1</h2>\n\t\t<h3>Lesson 1</h3>\n\t\t<h3>Lesson 2</h3>\n\t<h2>Chapter 2</h2>\n\t\t<h3>Lesson 1</h3>\n\t\t<h3>Lesson 2</h3>\n<h1>Unit 2</h1>",pass:["<h1>Header</h1>","<h2>Header</h2>"],fail:["<p>Howdy</p>","<br/>","<a>What</a>","<h1>Header</h1><h2></h2>"],valid:function(a){var b=!0,a=$(a).filter("h1, h2, h3, h4, h5, h6");a.each(function(a,d){if(""==$(d).text())return b=!1});return b&&0<a.length}}));addLesson(Object({title:"Attributes",id:"attributes",description:"<p>We've established that the type of a tag is specified with its name. It's how we know a <span class='em-tag'>&lt;h1&gt;</span> is different from a <span class='cm-tag'>&lt;p&gt;</span>. But sometimes that alone is not enough, and so within the same &lt; and &gt;, you can specify additional pieces of information called <span class='cm-attribute'>attributes</span>.</p><p>Attributes can describe the dimension of an image, the specific styling to use, or provide a unique string to identify that element within a page. This will allow us later to refer to a particular element to perform an action on it with javascript or style it individually.</p><p>An attribute is a <span class='cm-attribute'>name</span>, followed by an equal sign, and then the attribute's <span class='cm-string'>value</span> in quotes. Change the id of the header element to be 'myHeader.'</p>",
input:'<h1 id="">My Awesome Webpage</h1>',solution:'<h1 id="myHeader">My Awesome Webpage</h1>',pass:['<h1 id="myHeader">    what what</h1>','<h1 name="foo" id="myHeader"></h1>'],fail:['<h1 id="something"></h1>','<h2 id="something"></h2>'],valid:function(a){a=$(a);return a.is("h1")&&"myHeader"==a.attr("id")}}));addLesson(Object({title:"There's No End!",id:"self-closing",description:"<p>While most tags have both a start and an end tag, it's overkill for certain elements. For example, there are tags to simply add a new line to text, or to draw a horizontal line as a divider. Since it wouldn't make sense to put other content inside either of them, these tags are called <span class='em'>self-closing</span> tags.</p><p>In place of an end tag, self-closing tags simply place a '/' at the end of the the start tag. The <span class='cm-tag'>&lt;hr/&gt;</span> (meaning <span class='cm-tag'>h</span>orizontal <span class='cm-tag'>r</span>ule) tag draws a horizontal line. The <span class='cm-tag'>&lt;br/&gt;</span> (meaning <span class='cm-tag'>br</span>eak) tag adds a new empty line. Use the <span class='cm-tag'>hr</span> tag to add a line between the two paragraphs.</p>",
input:"<p>Line one</p>\n<p>Line two</p>",solution:"<p>Line one</p>\n<hr/>\n<p>Line two</p>",pass:["<p>Line one</p><hr/><p></p>","<p></p><hr/><p></p>","<p></p>               <hr/>Howdy<p></p>"],fail:["<p>Line one<hr/></p><p>Line two</p>","<p>Line one</p><p>Line Two</p>"],valid:function(a){a=$(a);a=a.filter("p, hr");return 3!=a.length?!1:$(a[0]).is("p")&&$(a[1]).is("hr")&&$(a[2]).is("p")}}));addLesson(Object({title:"HTML Entities",id:"entities",description:"<p>By now you know how to render text in a paragraph, and that tags make heavy use of symbols like &lt; and &gt;. So how do you make HTML display those characters? With HTML entities.</p><p>HTML entities begin with <span class='cm-atom'>&amp;</span>, name an <span class='em'>entity</span> and then end with a <span class='em-atom'>;</span>.For example, <span class='cm-atom'>&amp;lt;</span> renders a less-than symbol (<span class='cm-atom'>&lt;</span>), and <span class='cm-atom'>&amp;gt;</span> renders a greater-than symbol (<span class='cm-atom'>&gt;</span>). Not only does HTML use entities for reserved characters, but also symbols that you normally wouldn't type directly. Use the list below to replace the text with their corresponding symbols.</p><p><ul><li><span class='cm-atom'>&amp;lt;</span> &rarr; &lt;</li><li><span class='cm-atom'>&amp;gt;</span> &rarr; &gt;</li><li><span class='cm-atom'>&amp;times;</span> &rarr; &times;</li><li><span class='cm-atom'>&amp;amp;</span> &rarr; &amp;</li><li><span class='cm-atom'>&amp;rarr;</span> &rarr; &rarr;</li></ul></p>",
input:"<p>example &rarr; your turn</p>\n<p>2 (times) 5 = 10</p>\n<p>2 (less than) 5 (greater than) 3</p>\n<p>Beans (and) cornbread</p>",solution:"<p>example &rarr; your turn</p>\n<p>2 &times; 5 = 10</p>\n<p>2 &lt; 5 &gt; 3</p>\n<p>Beans &amp; cornbread</p>",pass:["<p>example &rarr; your turn</p>\n<p>2 &times; 5 = 10</p>\n<p>2 &lt; 5 &gt; 3</p>\n<p>Beans &amp; cornbread</p>"],fail:["<p>example &rarr; your turn</p>\n<p>2 (times) 5 = 10</p>\n<p>2 &lt; 5 &gt; 3</p>\n<p>Beans &amp; cornbread</p>","<p>example &rarr; your turn</p>\n<p>2 &times; 5 = 10</p>\n<p>2 &lt; 5 &gt; 3</p>\n<p>Beans (and) cornbread</p>"],
valid:function(a){var a=$(a),b=["&times;","&lt;","&gt;","&amp;"],c;for(c in b){var d=!1;a.filter("p").each(function(a,f){var g=$(f).text(),h=$("<p>"+b[c]+"</p>").text();if(0<g.indexOf(h))return d=!0});if(!d)return!1}return!0}}));addUnit({title:"Fundamentals",lessons:[]});
addLesson(Object({title:"Links All Around!",id:"links",description:"<p>In a lot of ways, links are the internet. They consist of a clickable portion (usually text), and point to a new page, identified by a URL <span class='definition'>Uniform Resource Locator</span>. Links are described with the <span class='cm-tag'>&lt;a&gt;</span> tag, where the contents is the clickable portion. The <span class='cm-attribute'>href</span> attribute describes the destination of the link.</p><p>Whatever goes between the start and end tags is clickable, whether it's an image or text. Make this link point to your favorite website.</p>",input:'<a href="">My Favorite Site</a>',
solution:'<a href="http://stackoverflow.com">My Favorite Site</a>',pass:['<a href="foo">bar</a>','<a id="howdy" href="foo">bar</a>'],fail:['<a href="">Site</a>',"<p>Nope</p>"],valid:function(a){a=$(a);return a.is("a")&&""!=a.attr("href")}}));addLesson(Object({title:"Pretty Pretty Pictures!",id:"images",description:"<p>The internet would be a much duller place without images. The <span class='cm-tag'>&lt;img&gt;</span> tag adds an image to your HTML document, with the <span class='cm-attribute'>src</span> attribute specifying the location of the image. Like the <span class='cm-tag'>&lt;hr/&gt;</span> and <span class='cm-tag'>&lt;br/&gt;</span> tags, the image tag is self-closing. After all, it's an image, and it doesn't make sense for it to have any text content.</p><p>Make the image at right display the image located at 'img/fail.jpg'",
input:'<p>ZOMGROFL! Look at this picture: <img src="" /></p>',solution:'<p>ZOMGROFL! Look at this picture: <img src="img/fail.jpg" /></p>',pass:['<p>ZOMGROFL! Look at this picture: <img src="img/fail.jpg" /></p>'],fail:['<p>ZOMGROFL! Look at this picture: <img src="fail.jpg" /></p>','<p>ZOMGROFL! Look at this picture: <img src="/img/fail.jpg" /></p>','<p><img src=""/></p>',"<p></p>"],valid:function(a){return 0<$(a).children('img[src="img/fail.jpg"]').length}}));addLesson(Object({title:"The Long and Winding Path",id:"paths",description:"<p>Both images and links make use of URLs to identify their links and sources, so we'll go through them in more detail. Let's look at the url <span class='code'>http://en.wikipedia.org/wiki/Html</span>. The <span class='code'>http://</span> portion defines the protocol that your browser uses to communicate with the servers that run wikipedia. The <span class='code'>en.wikipedia.org</span> portion is a domain name, which identifies the websiteness of the website, for lack of a better term.The rest, <span class='code'>/wiki/Html</span>, specifies a path on that server.</p><p>Paths on servers work just like paths on your own computer. For example, the <span class='code'>Html</span> document lives in the <span class='code'>wiki/</span> directory on Wikipedia, and the full URL identifies that we're requesting that path from the wikipedia server using the <span class='code'>http</span> protocol.</p><p>When you provided an image with the path of <span class='code'>/img/fail.jpg</span>, the / at the beginning means that that path is <span class='definition'>absolute</span>, meaning it gets added directly on to the domain name. If we omit that /, then it indicates a <span class='definition'>relative</span> path, meaning it refers to a document in the same directory. That, of course, depends on the directory of the page of the document we're browsing.</p><p>On <span class='code'>http://foo.com/index.html</span>:<ul><li><span class='code'>/img/fail.jpg</span> &rarr; <span class='code'>http://foo.com/img/fail.jpg</span></li><li><span class='code'>img/fail.jpg</span> &rarr; <span class='code'>http://foo.com/img/fail.jpg</span></li></ul>On <span class='code'>http://foo.com/some/other/path.html</span>:<ul><li><span class='code'>/img/fail.jpg</span> &rarr; <span class='code'>http://foo.com/img/fail.jpg</span></li><li><span class='code'>img/fail.jpg</span> &rarr; <span class='code'>http://foo.com/some/other/img/fail.jpg</span></li></ul></p>",
input:'<img src="" width="" height=""/>',solution:'<img src="" width="100" height="200" />',valid:function(a){a=$(a);return a.is("img")&&(""!=a.attr("width")||""!=a.attr("height"))}}));addLesson(Object({title:"No Comment?",id:"comments",description:"<p>Normally, text in an HTML document gets rendered to the screen, but it also provides a way for you to put <span class='cm-comment'>comments</span> in the code that don't appear in the document. If you look at the source code of most HTML documents (many browsers enable you to do so by right-clicking on the page and selecting 'View Source'), you'll probably see at least a few of them</p><p>Unlike other languages, HTML does not make use of <span class='definition'>syntactic whitespace</span>, which meants that you can put as many spaces and newlines between tags as you want, and it won't affect the way it renders. Most HTML authors use a combination of indentation, newlines to separates lines of code, and comments to improve the <span class='definition'>readability</span> of the code. Even if no one but you will be editing your code, it doesn't take long to appreciate well-formatted markup.</p><p>Any text between <span class='cm-comment'>&lt;!--</span> and <span class='cm-comment'>--&gt;</span> is considered a comment. Note the difference in how readable the bottom portion of code is compared to the top, and then move the tags around and add a comment to mimic the styling of the rest.</p>",
input:"<h1>The Main Section</h1>\n<h2>Subsection</h2><p><a href='a.html'>Page 1</a><br/><a href='b.html'>Page 2</a></p>\n\n<\!-- This means the same as above, but is easier to read --\>\n<h2>Subsection</h2>\n  <\!-- These pages talk about Foo --\>\n  <p>\n    <a href='c.html'>Page 3</a>\n\t<br/><a href='d.html'>Page 4</a>\n  </p>",solution:"<h1>The Main Section</h1>\n<h2>Subsection</h2>\n  <\!-- These pages talk about Bar --\>\n  <p>\n    <a href='a.html'>Page 1</a><br/>\n    <a href='b.html'>Page 2</a>\n  </p>\n\n<\!-- This means the same as above, but is easier to read --\>\n<h2>Subsection</h2>\n  <\!-- These pages talk about Foo --\>\n  <p>\n    <a href='c.html'>Page 3</a>\n\t<br/><a href='d.html'>Page 4</a>\n  </p>",
pass:[],fail:[],valid:function(a){a=$(a);return 3>a.filter(function(){return 8==this.nodeType}).length||6>a.filter(function(){return 3==this.nodeType}).length?!1:!0}}));addLesson(Object({title:"Take a Break!",id:"break",description:"<p>Because HTML doesn't interpret the space between tags as text, it has a tag to insert a new line in the middle of the paragraph. This, <span class='cm-tag'>&lt;br/&gt;</span> is the <span class='cm-tag'>br</span>eak tag.</p><p>For example, we are using the &lt;br/&gt; tag to insert a break between this line<br/>and this line. The text continues right where it left off, but on the next line down. Put in breaks between the lines of this limmerick to format it correctly</p>",
input:"<p>There once was a man named Pope,\nwho plugged into an oscilloscope.\nThe cyclical trace\nof their carnal embrace\nhad a damn near infinite slope!</p>",solution:"<p>There once was a man named Pope,<br/>\nwho plugged into an oscilloscope.<br/>\nThe cyclical trace<br/>\nof their carnal embrace<br/>\nhad a damn near infinite slope!</p>",pass:[],fail:["<p>There once was a man named Pope,<br/>\nwho plugged into an oscilloscope.<br/>\nThe cyclical trace<br/>\nof their carnal embracehad a damn near infinite slope!</p>"],
valid:function(a){return 3<$(a).children("br").length}}));addUnit({title:"Getting Textual",lessons:[]});
addLesson(Object({title:"Fortune Favors the Bold",id:"bold",description:"<p>Boring text is boring. Sometimes you want to draw attention to a   particular word or words by emboldening them. To this end, HTML provides the <span class='cm-tag'>&lt;b&gt;</span> and the <span class='cm-tag'>&lt;strong&gt;</span> tags.</p><p>In most browsers, they accomplish the same thing -- making text <b>bold</b>, but while the meaning of the <span class='cm-tag'>&lt;b&gt;</span> tag is to make text bold, the meaning of <span class='cm-tag'>&lt;strong&gt;</span> tag is left up to the browser. There may come a time when browsers decide that <span class='cm-tag'>strong</span> is best reflected with purple cursive text, however unlikely that may be. But even so, this distinction is left up to the the browser that renders the page. Use the <span class='cm-tag'>strong</span> tag to make the word 'bold' appear as such.</p>",input:"<p>He was a bold man that first ate an oyster. - Jonathan Swift </p>\n<p>That is a bold-faced lie!</p>\n<p>Be bold, be bold, and everywhere be bold. -Herbert Spencer</p>",
solution:"<p>He was a <strong>bold</strong> man that first ate an oyster. - Jonathan Swift </p>\n<p>That is a <strong>bold</strong>-faced lie!</p>\n<p>Be <strong>bold</strong>, be <strong>bold</strong>, and everywhere be <strong>bold</strong>. - Herbert Spencer</p>",pass:[],fail:[],valid:function(a){return $(a).children("strong").text().match(/(\W*bold\W*){3}/)}}));addLesson(Object({title:"Tags Taste M-Italic",id:"italics",description:"<p>Another common way to draw attention to words is with <em>italics</em>. Like with bold, there are two tags that accomplish this. There's the <span class='cm-tag'>&lt;i&gt;</span> tag, which always renders text italicized, and there is the <span class='cm-tag'>&lt;em&gt;</span> tag, meaning <span class='cm-tag'>em</span>phasis, that is left up to the browser.</p><p>Like <span class='cm-tag'>&lt;strong&gt;</span> is preferred over the <span class='cm-tag'>&lt;b&gt;</span>, the <span class='cm-tag'>&lt;em&gt;</span> tag is preferred over the <span class='cm-tag'>&lt;i&gt;</span> tag. While they accomplish the same thing, they carry different meaning. One means for text to simply be rendered in italics, and the other mean <em>emphasis</em>. While for most internet users there is no distinction, browsers for the visually-impaired often speak content to the user, and they interpret <span class='cm-tag'>&lt;em&gt;</span> but can ignore <span class='cm-tag'>&lt;i&gt;</span>.</p>",
input:"<p>Used correctly, italics can be very useful.</p>",solution:"<p>Used correctly, italics can be <em>very useful</em>.</p>",pass:[],fail:[],valid:function(a){return $(a).children("em").text().match(/\W*very useful\W*/)}}));addLesson(Object({title:"A bird! A plane! Supertext!",id:"supertext",description:"<p>Whether it's for exponents in mathematic expressions, or references, or for footnotes, HTML provides a way to mark text in <sup>superscript</sup> and in <sub>subscript</sub>. These tags are <span class='cm-tag'>&lt;sup&gt;</span> and <span class='cm-tag'>&lt;sub&gt;</span> respectively.</p><p>In the equation on the right, make the 'gravity' subscript, the '2' superscript, and replace the '*' with the <span class='cm-atom'>&amp;times;</span> entity to show the distance a falling object travels.</p>",
input:"<p>D(t) = A gravity * t2</p>",solution:"<p>D(t) = A<sub>gravity</sub> &times; t<sup>2</sup></p>",pass:[],fail:["<p>D(t) = A gravity &times; t<sup>2</sup></p>","<p>D(t) = A<sub>gravity</sub> &times; t2</p>","<p>D(t) = A<sub>gravity</sub> * t<sup>2</sup></p>"],valid:function(a){var b=$(a),a=0<b.html().indexOf($("<p>&times;</p>").html()),c=b.children("sub").text().match(/\W*gravity\W*/),b=b.children("sup").text().match(/\s*2\s*/);return c&&b&&a}}));addLesson(Object({title:"The Many Styles of Text",id:"text-styles",description:"<p>There are a lot more transformations that can be done on text. You'll see in a few minutes another way of changing how text appears, but you should also be aware of these tags. The <span class='cm-tag'>&lt;big&gt;</span> and <span class='cm-tag'>&lt;small&gt;</span> tags make the text they contain bigger and smaller. The <span class='cm-tag'>&lt;del&gt;</span> tag makes text appear with a line through it as if <del>deleted</del>, and <span class='cm-tag'>&lt;ins&gt;</span> makes text appear as if it has just been <ins>inserted</ins>. Lastly, the <span class='cm-tag'>&lt;pre&gt;</span> marks text as preformatted, which is generally used for code.</p><p>In the example at right, use these new tags to: <ol><li>Make the word 'big' appear larger</li><li>Make the word 'small' appear smaller</li><li>Strike through the word 'deleting'</li><li>Mark the word 'insert' as such</li><li>Make the example code 'preformatted'</li></ol></p>",
input:"<\!-- Use 'big' and 'small' --\>\n<p>Software projects come in all sizes, from small\nweekend projects to big year-long ones.</p>\n\n<\!-- Use 'del' and 'ins' --\>\n<p>Be careful when deleting code, but feel free \nto insert new code as you see fit.</p>\n\n<\!-- Use 'pre' --\>\n<p>Here's an example of HTML:</p>\n&lt;p&gt; Hello World! &ltp/&gt;",solution:"<\!-- Use 'big' and 'small' --\>\n<p>Software projects come in all sizes, from <small>small</small>\nweekend projects to <big>big</big> year-long ones.</p>\n\n<\!-- Use 'del' and 'ins' --\>\n<p>Be careful when <del>deleting</del> code, but feel free \nto <ins>insert</ins> new code as you see fit.</p>\n\n<\!-- Use 'pre' --\>\n<p>Here's an example of HTML:</p>\n<pre>&lt;p&gt; Hello World! &ltp/&gt;</pre>",
pass:[],fail:[],valid:function(a){var a=$(a),b={big:/\W*big\W*/,small:/\W*small\W*/,del:/\W*deleting\W*/,ins:/\W*insert\W*/},c;for(c in b)if(!a.children(c).text().match(b[c]))return!1;return!a.filter("pre").text().match(/\W*hello\W*world\W*/i)?!1:!0}}));addUnit({title:"Lists and Tables",lessons:[]});
addLesson(Object({title:"Let Me List The Ways",id:"lists",description:"<p>Thus far, we've dealt mostly in text. Particularly, headers and    paragraphs. But the pallate becomes sophisticated rather quickly,  and we need something more, which brings us to lists.</p><p>Lists begin with either the <span class='cm-tag'>&lt;ul&gt;</span> tag, which makes an <span class='cm-tag'>u</span>nordered <span class='cm-tag'>l</span>list with bullet points, or the <span class='cm-tag'>&lt;ol&gt;</span> tag, which makes an <span class='cm-tag'>o</span>rdered <span class='cm-tag'>l</span>ist with numbers.</p><p>HTML elements can be <span class='definition'>nested</span>, meaning that they can contain other HTML elements. In earlier lessons, you nested an <span class='cm-tag'>&lt;a&gt;</span> tag inside of a paragraph, for example. HTML lists contain many <span class='cm-tag'>&lt;li&gt;</span> or <span class='cm-tag'>l</span>ist <span class='cm-tag'>i</span>tem tags to represent each of the items in a list.</p><p>Add an item to your grocery list, and to your to-do list.</p>",input:"<p>My Grocery List:\n\t<ul>\n\t\t<li>Mac-and-cheese</li>\n\t\t<li>Mountain Dew</li>\n\t\t<li>Marmelade</li>\n\t</ul>\n</p>\n<p>My To-Do List:\n\t<ol>\n\t\t<li>Learn HTML</li>\n\t\t<li>Become a programming wizard</li>\n\t\t<li>?</li>\n\t\t<li>Profit</li>\n\t</ol>\n</p>",
solution:"<p>My Grocery List:\n\t<ul>\n\t\t<li>Mac-and-cheese</li>\n\t\t<li>Mountain Dew</li>\n\t\t<li>Marmelade</li>\n\t\t<li>Meat Loaf</li>\n\t</ul>\n</p>\n<p>My To-Do List:\n\t<ol>\n\t\t<li>Learn HTML</li>\n\t\t<li>Become a programming wizard</li>\n\t\t<li>?</li>\n\t\t<li>Profit</li>\n\t\t<li>World Domination</li>\n\t</ol>\n</p>",pass:[],fail:[],valid:function(a){a=$(a);return 3<a.children("ul li").length&&4<a.children("ol li").length}}));addLesson(Object({title:"List-ception: Lists Within Lists",id:"list-ception",description:"<p>As the last lesson noted, HTML elements can contain other elements. We'll explore this idea a little more with <span class='definition'>nested lists</span>. In a table of contents, you might list out the acts of a play, and then the scenes in each act. To do this, you first make a list, with list items for each of the acts. Then in each of these list items, you begin a new list with its own list items for the scenes in that act.</p><p>For both ordered and unordered lists, the second list appears indented to one more level. For ordered lists, the numbering can be styled to change to use roman numerals at one level, or letters at another. Unordered lists typically use different bullet points at the various levels.</p><p>Follow the example to add the scenes for the second act.</p>",
input:"<h2>The Life and Death of Julius Caesar</h2>\n<ol>\n  <li>Act\n    <ol>\n      <li>Scene: A street in Rome</li>\n      <li>Scene: A public place</li>\n      <li>Scene: The same street in Rome</li>\n    </ol>\n  </li>\n  \n  <li>Act\n    <\!-- Scene: Brutus' orchard --\>\n    <\!-- Scene: Caesar's house --\>\n    <\!-- Scene: A street near the Capitol --\>\n    <\!-- Scene: Another part of the same street --\>\n  </li>\n</ol>",solution:"<h2>The Life and Death of Julius Caesar</h2>\n<ol>\n  <li>Act\n    <ol>\n      <li>Scene: A street in Rome</li>\n      <li>Scene: A public place</li>\n      <li>Scene: The same street in Rome</li>\n    </ol>\n  </li>\n  \n  <li>Act\n\t<ol>\n\t  <li>Scene: Brutus' orchard</li>\n\t  <li>Scene: Caesar's house</li>\n\t  <li>Scene: A street near the Capitol</li>\n\t  <li>Scene: Another part of the same street</li>\n\t</ol>\n  </li>\n</ol>",
pass:[],fail:[],valid:function(a){return 7==$(a).filter("ol").find("li ol li").length}}));addLesson(Object({title:"Turning The Tables",description:"<p>In addition to lists, HTML provides a way to describe tables. The nature of tables means that the markup can get a little crowded, so using indentation, comments and spacing is key in keeping it organized.</p><p>A table begins with the <span class='cm-tag'>&lt;table&gt;</span> tag containing several <span class='cm-tag'>&lt;tr&gt;</span> or <span class='cm-tag'>t</span>able <span class='cm-tag'>r</span>ow tags. Each row contains several <span class='cm-tag'>&lt;td&gt;</span> or <span class='cm-tag'>t</span>able <span class='cm-tag'>d</span>etail tags -- each of which goes into its own column.</p><p>A table has as many columns as the the row with the most column has. So if one row has 5 <span class='cm-tag'>&lt;td&gt;</span> tags, and another has only 3, then the table will have 5 columns. Rows with fewer than those 5 columns would just have empty cells at the end.</p><p>You can label columns by using <span class='cm-tag'>&lt;th&gt;</span> or <span class='cm-tag'>t</span>able <span class='cm-tag'>h</span>eader tags instead of <span class='cm-tag'>&lt;td&gt;</span>. They are typically rendered as bold-faced, but they have the semantic meaning of being column headers. Add an item to the list of expenses.</p>",
input:"<\!-- Alright, we begin our table --\>\n<table>\n  <\!-- This is our first row --\>\n  <tr>\n    <\!-- These are not normal elements, but they're headers --\>\n    <th>What</th>\n    <th>How much?</th>\n  </tr>\n  \n  <\!-- This is the first item we have --\>\n  <tr>\n    <\!-- Columns 1, 2, and 3 --\>\n    <td>Mountain Dew</td>\n    <td>$50</td>\n  </tr>\n  \n  <\!-- This is the second item we have --\>\n  <tr>\n    <td>Cheetos</td>\n    <td>$20</td>\n  </tr>\n  \n  <\!-- Put your new item here --\>\n</table>\n\n<\!-- This is just to help show the elements of the table --\>\n<style>\ntd, th {\n  border: dotted 1px black;\n}\n</style>",
solution:"<\!-- Alright, we begin our table --\>\n<table>\n  <\!-- This is our first row --\>\n  <tr>\n    <\!-- These are not normal elements, but they're headers --\>\n    <th>What</th>\n    <th>How much?</th>\n  </tr>\n  \n  <\!-- This is the first item we have --\>\n  <tr>\n    <\!-- Columns 1, 2, and 3 --\>\n    <td>Mountain Dew</td>\n    <td>$50</td>\n  </tr>\n  \n  <\!-- This is the second item we have --\>\n  <tr>\n    <td>Cheetos</td>\n    <td>$20</td>\n  </tr>\n  \n  <tr>\n    <td>Skittles</td>\n    <td>$30</td>\n  </tr>\n</table>\n\n<\!-- This is just to help show the elements of the table --\>\n<style>\ntd, th {\n  border: dotted 1px black;\n}\n</style>",
pass:[],fail:[],valid:function(a){a=$(a);return 3<a.find("tr").length&&6<=a.find("tr td").length}}));addUnit({title:"Style and CSS",lessons:[]});
addLesson(Object({title:"Stylin'",id:"style",description:"<p>Rather than using tags like <span class='cm-tag'>&lt;big&gt;</span> and <span class='cm-tag'>&lt;del&gt;</span> to change the way text is displayed, a more popular approach is to use styles. HTML elements support a <span class='cm-atom'>style</span> attribute that describes how it should be displayed.</p><p>The contents of the style attribute has its own syntax. In it's simplist form, it has the name of a style, and a value separated by a colon. For example, the text in the paragraph <span class='cm-tag'>&lt;p</span> <span class='cm-atom'>style</span>=<span class='cm-comment'>\"color: red\"</span><span class='cm-tag'>&gt;</span>Hello!<span class='cm-tag'>&lt;/p&gt;</span> would be displayed red.</p><p>We'll learn more styling options shortly, but for now, use the <span class='cm-atom'>style</span> attribute to make the text of the headers red</p>",input:'<h1 style="">This Header Should Be Red</h1>\n<h1>As Should This One</h1>\n<h1>Oh, and This One</h1>',
solution:'<h1 style="color:red">This Header Should Be Red</h1>\n<h1 style="color:red">As Should This One</h1>\n<h1 style="color:red">Oh, and This One</h1>',pass:[],fail:[],valid:function(a){var b=!0;$(a).filter("h1").each(function(a,d){if(!$(d).attr("style").match(/color\s*:\s*red/))return b=!1});return b}}));addLesson(Object({title:"Endless Style",id:"more-styles",description:"<p>There is almost no end to the stylings that are available for the style attribute. For example, you can use <span class='cm-atom'>font-family</span> to change the font used, or <span class='cm-atom'>font-size</span> to change how large text appears.</p><p>When specifying multiple styles within the style tag, you separate them with a semicolon, ';'. For example, to set the font color to be red, and to make the font 10 pixels tall, you could say <span class='cm-atom'>style</span>=<span class='cm-comment'>\"color: red; font-size: 10px;\"</span>. Use this styling to make all the <span class='cm-tag'>&lt;li&gt;</span> tags have: <ol><li>blue font using <span class='cm-atom'>color:</span></li><li>size 15 font using <span class='cm-atom'>font-size:</span></li><li>Verdana font using <span class='cm-atom'>font-family:</span></li></ol>",
input:"<ol>\n  <li>One fish</li>\n  <li>Two fish</li>\n  <li>Red fish</li>\n  <li>Blue fish</li>\n</ol>",solution:'<ol>\n  <li style="color:blue; font-size:15px; font-family:Verdana">One fish</li>\n  <li style="color:blue; font-size:15px; font-family:Verdana">Two fish</li>\n  <li style="color:blue; font-size:15px; font-family:Verdana">Red fish</li>\n  <li style="color:blue; font-size:15px; font-family:Verdana">Blue fish</li>\n</ol>',pass:[],fail:[],valid:function(a){var b=[/\W*color\W*:\W*blue/,/\W*font-size\W*:\W*15/,
/\W*font-family\W*:\W*verdana/i],c=!0;$(a).children("li").each(function(a,e){for(var f in b)if(!($(e).attr("style")||"").match(b[f]))return console.log("Failed for "+b[f]),c=!1});return c}}));addLesson(Object({title:"The Style Tag",id:"style-tag",description:"<p>As the last lesson demonstrated, it can be extremely tedious to specify the <span class='cm-atom'>style</span> attribute for every element you'd like to change. And, it makes it difficult to change that styling (if you decide you'd prefer a different font, or size, etc.). Fortunately, the <span class='cm-tag'>&lt;style&gt;</span> tag solves this problem.</p><p>In the style tag, you're actually another language, CSS (<span class='definition'>cascading style sheets</span>). It mostly consists of a <span class='definition'>selector</span>, a '{', the same type of style definition you'd use in the <span class='cm-atom'>style</span> attribute, and then a '}'.</p><p>The <span class='definition'>selector</span> describes what HTML elements should have that styling applied to them. They can be made to be very specific and descriptive, or very wide-ranging. We'll talk more about them later, but in our case the simple tag name <span class='cm-tag'>li</span> simply means that the style enclosded in the {}'s applies to all <span class='cm-tag'>l</span>ist <span class='cm-tag'>i</span>tems.</p><p>Modify the styling to make the font blue, 15 pixels, and Verdana.</p>",
input:"<style>\nli {\n    color: red;\n}\n</style>\n\n<ol>\n  <li>One fish</li>\n  <li>Two fish</li>\n  <li>Red fish</li>\n  <li>Blue fish</li>\n</ol>",solution:"<style>\nli {\n    color: blue;\n    font-size: 15px;\n    font-family: Verdana;\n}\n</style>\n\n<ol>\n  <li>One fish</li>\n  <li>Two fish</li>\n  <li>Red fish</li>\n  <li>Blue fish</li>\n</ol>",pass:[],fail:[],valid:function(a){var b=[/\W*color\W*:\W*blue/,/\W*font-size\W*:\W*15/,/\W*font-family\W*:\W*verdana/i],c=!0;$(a).filter("style").each(function(a,
e){for(var f in b)if(!($(e).text()||"").match(b[f]))return console.log("Failed for "+b[f]),c=!1});return c}}));addLesson(Object({title:"How Classy",id:"classes",description:"<p>CSS includes a selector to find elements with a particular <span class='cm-atom'>class</span> attribute. More specifically, an element can have multiple classes in it's <span class='cm-atom'>class</span>attribute, separated by spaces, and the CSS selector will style all tags that have that class. In short, classes provide a way of grouping elements together for styling purposes, beyond just their particular tag.</p><p>At right, there is a table where all the even rows should have the <span class='cm-atom'>background-color: </span><span class='cm-comment'>lightgray</span> style, and the odd rows should have <span class='cm-atom'>background-color: </span><span class='cm-comment'>gray</span>. The <span class='cm-tag'>.odd</span> selector in the <span class='cm-tag'>&lt;style&gt;</span> tag will style all rows with 'odd' in its <span class='cm-atom'>class</span>, and likewise the <span class='cm-tag'>.even</span> selector styles all the rows marked as 'even.' This is commonly used to help users track across long rows of data. Update the <span class='cm-tag'>&lt;style&gt;</span> tag to set the appropriate background colors.</p>",
input:"<style>\n.odd {\n    <\!-- My background-color should be gray, or perhaps Earl Grey, hot --\>\n}\n\n.even {\n    <\!-- My background-color should be lightgray --\>\n}\n</style>\n<table>\n  <tr class='odd'>\n    <td>Jean-Luc</td><td>Picard</td>\n  </tr><tr class='even'>\n    <td>William</td><td>Riker</td>\n  </tr><tr class='odd'>\n    <td>Geordi</td><td>La Forge</td>\n  </tr><tr class='even'>\n    <td>Wesley</td><td>Crusher</td>\n  </tr><tr class='odd'>\n    <td>Deanna</td><td>Troi</td>\n  </tr><tr class='even'>\n    <td>Tasha</td><td>Yar</td>\n  </tr>\n</table>",
solution:"<style>\n.odd {\n    background-color: gray;\n}\n\n.even {\n    background-color: lightgray;\n}\n</style>\n<table>\n  <tr class='odd'>\n    <td>Jean-Luc</td><td>Picard</td>\n  </tr><tr class='even'>\n    <td>William</td><td>Riker</td>\n  </tr><tr class='odd'>\n    <td>Geordi</td><td>La Forge</td>\n  </tr><tr class='even'>\n    <td>Wesley</td><td>Crusher</td>\n  </tr><tr class='odd'>\n    <td>Deanna</td><td>Troi</td>\n  </tr><tr class='even'>\n    <td>Tasha</td><td>Yar</td>\n  </tr>\n</table>",
pass:[],fail:[],valid:function(a){var b=!0;$(a).filter("style").each(function(a,d){var e=$(d).text();e.match(/.odd\W+background-color\W*:\W*gray/m)||(b=!1);e.match(/.even\W+background-color\W*:\W*lightgray/m)||(b=!1)});return b}}));addLesson(Object({title:"Span-ish Inquisition",id:"span",description:"<p>One of the features that makes classes particularly useful (especially for style) is that they allow you to not only style multiple HTML elements simultaneously, but also to keep consistent styling on the page. For example, the editor you see at your right uses the <span class='cm-tag'>cm-tag</span> class to style all of its HTML tag names.</p><p>In the case that you want to provide styling to just a word, phrase, or just a small portion of an element, you can use the <span class='cm-tag'>&lt;span&gt;</span> tag. It has no meaning other than a logical grouping, typically of style. For instance, when I enclose the word <span class='cm-tag'>tag</span> in a span element, it appears with the same styling as in the editor: <span class='cm-tag'>&lt;span</span> <span class='cm-atom'>class</span>=<span class='cm-comment'>\"cm-tag\"</span><span class='cm-tag'>&gt;</span>tag<span class='cm-tag'>&lt;/span&gt;</span>. In fact, making that HTML appear color coded involves quite a few <span class='cm-tag'>&lt;span&gt;</span> tags. The curious reader might consider it an exercise.</p><p>Place the names of the characters in this scene in <span class='cm-tag'>&lt;span&gt;</span> tag to style them with the class 'name.'</p>",
input:"<style>\n.name {\n\tfont-family: monospace;\n    background-color: lightgray;\n    font-size: 14px;\n}\n</style>\n\n<p>\n  Mr. Praline: I'll tell you what's wrong with it,\n  my lad. HE's dead, that's what's wrong with it!\n</p>\n\n<p>\n  Owner: No, no, 'e's uh,...he's resting.\n</p>\n\n<p>\n  Mr. Praline: Look, matey, I know a dead parrot\n  when I see one, and I'm looking at one right now.\n</p>\n\n<p>\n  Owner: No no he's not dead, he's, he's restin'!\n  Remarkable bird, the Norwegian Blue, idn'it, ay?\n  Beautiful plumage!\n</p>\n\n<p>\n  Mr. Praline: The plumage don't enter into it.\n  It's stone dead.\n</p>",
solution:"<style>\n.name {\n\tfont-family: monospace;\n    background-color: lightgray;\n    font-size: 14px;\n}\n</style>\n\n<p>\n  <span class='name'>Mr. Praline</span>: I'll tell you what's wrong with it,\n  my lad. HE's dead, that's what's wrong with it!\n</p>\n\n<p>\n  <span class='name'>Owner</span>: No, no, 'e's uh,...he's resting.\n</p>\n\n<p>\n  <span class='name'>Mr. Praline</span>: Look, matey, I know a dead parrot\n  when I see one, and I'm looking at one right now.\n</p>\n\n<p>\n  <span class='name'>Owner</span>: No no he's not dead, he's, he's restin'!\n  Remarkable bird, the Norwegian Blue, idn'it, ay?\n  Beautiful plumage!\n</p>\n\n<p>\n  <span class='name'>Mr. Praline</span>: The plumage don't enter into it.\n  It's stone dead.\n</p>",
pass:[],fail:[],valid:function(a){var a=$(a),b=5==a.find('span[class="name"]').length;a.find('span[class="name"]').each(function(a,d){var e=$(d).text();e.match(/\W*mr\W*praline\W*/i)||e.match(/\W*owner\W*/i)||(b=!1)});return b}}));addUnit({title:"Forms",lessons:[]});
addLesson(Object({title:"Form-ulaic",id:"forms",description:"<p>You've seen 'em -- forms. They're a mechanism for describing, structuring, and prompting user input. Forms begin with a <span class='cm-tag'>&lt;form&gt;</span> tag, and contain several <span class='cm-tag'>&lt;input&gt;</span> tags. These input tags can have various types, and we'll see examples of those in a minute. However, one of the most commonly-used types is the <span class='cm-atom'>text</span> type.</p><p>For example, you might prompt a user for the name, or email address with such an input tag. For inputs where you'd like to collect information, but it's sensitive and thus shouldn't be displayed to the screen, you can use the <span class='cm-atom'>password</span> type instead. It behaves exactly like the <span class='cm-atom'>text</span> except that symbols appear in place of each character.</p><p>Follow the example and add an input for the user's email address, as well as a password.</p>",input:"<form>\n  Name: <input type='text' /><br/>\n\n  Email: <\!-- Input for email here! --\> <br/>\n\n  Password: <\!-- Input for password here! --\>\n</form>",
solution:"<form>\n  Name: <input type='text' /><br/>\n\n  Email: <input type='text' /><br/>\n\n  Password: <input type='password' /><br/>\n</form>",pass:[],fail:[],valid:function(a){a=$(a);return 2==a.find('input[type="text"]').length&&1==a.find('input[type="password"]').length}}));addLesson(Object({title:"What's in a Name?",id:"forms-name",description:"<p>While it's all well and good to provide labels for the user's sake, eventually you'll want to send this data somewhere or do something with it in the browser. To this end, inputs generally have a name associated with them. It's this name that gets associated with the data in that input.</p><p>Without getting too involved, what often happens when you submit a form is that that data is encoded in a particular format, and sent to a server with a <span class='cm-atom'>POST</span> request. In HTTP semantics, that simply means data of some kind if being submitted to a server. This is opposed to a <span class='cm-atom'>GET</span> request, which is what happens behind the scenes whenever you enter a url into your browser.</p><p>But enough about HTTP 'verbs' (that's what they're called). Add the names 'email' and 'password' to the form.</p>",
input:"<form>\n  Name: <input type='text' name='name'/><br/>\n\n  Email: <input type='text'/><br/>\n\n  Password: <input type='password'/>\n</form>",solution:"<form>\n  Name: <input type='text' name='name'/><br/>\n\n  Email: <input type='text' name='email'/><br/>\n\n  Password: <input type='password' name='password'/>\n</form>",pass:[],fail:[],valid:function(a){var b=$(a),a=b.find('input[type="text"][name="name"]'),c=b.find('input[type="text"][name="email"]'),b=b.find('input[type="password"][name="password"]');
return 1==a.length&&1==c.length&&1==b.length}}));addLesson(Object({title:"Radio? Check!",id:"radio-check",description:"<p>Text is useful as an input, but other times, you'd like to limit a user's options to a few select items. To this end, there are <span class='cm-tag'>radio</span> buttons (which allow only one to be selected), and <span class='cm-tag'>checkboxes</span> (which allow many to be selected).</p><p>In the case of these input selectors, the <span class='cm-atom'>name</span> attribute still carries the same meaning as for text fields. It's the name associated with the values conveyed by the input. In the case of radio buttons, it also provides grouping -- only one button with the same <span class='cm-atom'>name</span> can be selected at once.</p><p>The <span class='cm-atom'>name</span> attribute is the actual value associated with that button being selected, and is not visible to the user. Conversely, the label shown to the user does not get submitted with the form.</p><p>Add two more checkboxes asking if a user likes a given band, and extend the age groups to include a '30-39' and a '40-49' category.</p>",
input:"<form>\n  <p>\n  Do you like...<br/>\n    <input type='checkbox' name='bands' value='Barenaked Ladies' />Barenaked Ladies<br/>\n  </p>\n\n  <p>\n  What's your age?<br/>\n    <input type='radio' name='age' value='10-19' />10 - 19 years<br/>\n    <input type='radio' name='age' value='20-29' />20 - 29 years<br/>\n  </p>\n</form>",solution:"<form>\n  <p>\n  Do you like...<br/>\n    <input type='checkbox' name='bands' value='Barenaked Ladies' />Barenaked Ladies<br/>\n    <input type='checkbox' name='bands' value='Lady Gaga' />Lady Gaga<br/>\n    <input type='checkbox' name='bands' value='Cake' />Cake<br/>\n  </p>\n\n  <p>\n  What's your age?<br/>\n    <input type='radio' name='age' value='10-19' />10 - 19 years<br/>\n    <input type='radio' name='age' value='20-29' />20 - 29 years<br/>\n    <input type='radio' name='age' value='30-39' />30 - 39 years<br/>\n    <input type='radio' name='age' value='40-49' />40 - 49 years<br/>\n  </p>\n</form>",
pass:[],fail:[],valid:function(a){for(var a=$(a),b=a.find('input[type="checkbox"]'),a=a.find('input[type="radio"]'),b=3<=b.length,c="",d=1;5>d;++d)c+="\\s*"+d+"0\\s*-\\s*"+d+"9\\s*years",b=b&&$(a[d-1]).attr("value").match(RegExp("\\s*"+d+"0\\s*-\\s*"+d+"9"));return b&&a.parent().text().match(RegExp(c))}}));addLesson(Object({title:"Submit!",id:"form-submit",description:"<script>var submit = function() { alert('You submitted the form!'); }<\/script><p>You've learned all you need to know about gathering data from as user... except for the actual bit about sending that data somewhere. Forms typically have one of these two fates: <ol><li>Data is handled by JavaScript in the browser, or...</li><li>Data is encoded and send to a server</li></ol></p><p>Data being sent to a server is typically done through a <span class='cm-atom'>POST</span> request, which in HTTP semantics means that when requesting a url, your browser is also including some data in a certain format. There are many ways to accept this data, but it's beyond the scope of this discussion, unfortunately.</p><p>Still, to send the data contained in a form to said server, we need two last pieces. First, the <span class='cm-atom'>submit</span>-type input, which appears as a button that, when clicked, submits the form. The second piece is the <span class='cm-atom'>action</span> attribute on the form. It describes either the JavaScript function or the URL to submit the form to.</p><p>Add a submit button at the end of this form, and set the action of the form to be 'javascript:submit()'. When you're done, you can even try out your fancy new form!</p>",
input:"<\!-- Make sure to add 'action' to form! --\>\n<form>\n  Name: <input type='text' name='name'/><br/>\n\n  Email: <input type='text'/><br/>\n\n  Password: <input type='password'/><br/>\n\n  <\!-- Add a submit button here! --\>\n</form>",solution:"<form action='javascript:submit()'>\n  Name: <input type='text' name='name'/><br/>\n\n  Email: <input type='text'/><br/>\n\n  Password: <input type='password'/><br/>\n\n  <input type='submit' />\n</form>",pass:[],fail:[],valid:function(a){var b=$(a),
a=b.children().parent('form[action="javascript:submit()"]'),b=b.find('input[type="submit"]');return 1==a.length&&1==b.length}}));addLesson(Object({title:"Select an Option",id:"select-option",description:"<script>var submit = function() { alert('You submitted the form!'); }<\/script><p>You've learned all you need to know about gathering data from as user... except for the actual bit about sending that data somewhere. Forms typically have one of these two fates: <ol><li>Data is handled by JavaScript in the browser, or...</li><li>Data is encoded and send to a server</li></ol></p><p>Data being sent to a server is typically done through a <span class='cm-atom'>POST</span> request, which in HTTP semantics means that when requesting a url, your browser is also including some data in a certain format. There are many ways to accept this data, but it's beyond the scope of this discussion, unfortunately.</p><p>Still, to send the data contained in a form to said server, we need two last pieces. First, the <span class='cm-atom'>submit</span>-type input, which appears as a button that, when clicked, submits the form. The second piece is the <span class='cm-atom'>action</span> attribute on the form. It describes either the JavaScript function or the URL to submit the form to.</p><p>Add a submit button at the end of this form, and set the action of the form to be 'javascript:submit()'. When you're done, you can even try out your fancy new form!</p>",
input:"<\!-- Make sure to add 'action' to form! --\>\n<form>\n  Name: <input type='text' name='name'/><br/>\n\n  Email: <input type='text'/><br/>\n\n  Password: <input type='password'/><br/>\n\n  <\!-- Add a submit button here! --\>\n</form>",solution:"<form action='javascript:submit()'>\n  Name: <input type='text' name='name'/><br/>\n\n  Email: <input type='text'/><br/>\n\n  Password: <input type='password'/><br/>\n\n  <input type='submit' />\n</form>",pass:[],fail:[],valid:function(a){var b=$(a),
a=b.children().parent('form[action="javascript:submit()"]'),b=b.find('input[type="submit"]');return 1==a.length&&1==b.length}}));
